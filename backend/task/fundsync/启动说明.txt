基金数据同步系统 - 启动说明
================================

🔄 版本信息：v1.0 (初始版本)
- 支持场内基金、开放基金、货币基金、欧美QDII、亚洲QDII等多类型基金数据同步
- 模块化架构设计，包含数据处理和数据库操作模块
- 智能重复处理：自动识别并处理重复编码，以QDII数据为准
- 强制更新机制：确保每次都更新现有基金价格
- 多线程数据库操作，提高处理效率
- 完善的错误处理和重试机制
- 数据完整性检查：必须所有数据源都成功才能与数据库交互
- 优化日志输出：集中记录空价格基金编码

📁 文件说明：
- syncfund.py          # 主程序入口（已重命名）
- data_processor.py    # 数据处理模块（优化日志输出）
- db_operations.py     # 数据库操作模块（支持多线程）
- config.py            # 配置文件
- test/                # 测试目录
  ├── test_integration.py    # 集成测试脚本
  ├── test_imports.py        # 模块导入测试脚本
  ├── performance_test.py    # 性能测试脚本
  ├── test_fixed_function.py # 功能测试脚本
  ├── test_new_function.py   # 新功能测试脚本
  ├── debug_akshare.py       # akshare调试脚本
  └── env.sh                 # 环境变量配置脚本
- README.md            # 详细说明文档

🚀 快速启动：

1. 环境准备：
   pip install akshare sqlalchemy psycopg2-binary

2. 设置环境变量：
   cd test
   source env.sh
   cd ..
   
   或者手动设置：
   export PYTHONUNBUFFERED=1
   export PG_DB=your_database
   export PG_HOST_OUT=your_host
   export PG_PASSWORD=your_password
   export PG_PORT=5432
   export PG_USER=your_username

3. 测试模块导入：
   cd test
   python test_imports.py
   
   如果显示"🎉 所有模块导入测试通过！"，则继续下一步

4. 运行程序：
   cd ..
   python syncfund.py

5. 运行测试：
   cd test
   python test_integration.py

6. 性能测试（可选）：
   python performance_test.py

⚡ 多线程特性：

- **数据接口调用**：串行执行，避免API限制和网络冲突
- **并发插入**：支持多线程批量插入新基金
- **并发更新**：支持多线程批量更新现有基金
- **独立事务**：每个线程独立管理数据库事务
- **可配置参数**：
  - 数据接口：串行调用（concurrency=1）
  - 数据库操作：4个线程并发
  - 批次大小：默认1000条/批
  - 可在 config.py 中调整

🔧 故障排除：

如果遇到"FundDatabase 没有啊"等导入错误：

1. 检查文件是否存在：
   ls -la *.py
   ls -la test/*.py

2. 运行导入测试：
   cd test
   python test_imports.py

3. 检查Python路径：
   python -c "import sys; print(sys.path)"

4. 确保在正确的目录中运行：
   pwd
   # 主程序运行：应该在 fundsync 目录中
   # 测试运行：应该在 fundsync/test 目录中

✨ 主要特性：
- 自动整合场内、开放、货币、QDII等基金数据
- 智能处理重复编码（以QDII为准）
- 🆕 强制更新机制：每次运行都会更新现有基金价格
- 🆕 优化日志输出：集中记录空价格基金编码
- 自动同步数据库（增删改）
- 完善的错误处理和重试机制
- 模块化设计，易于维护
- 多线程并发操作，提升性能
- 🛡️ 数据完整性检查：必须所有5个数据源都成功才能与数据库交互
- 📁 项目结构优化：测试文件统一管理

📊 数据源要求：
- 开放基金：必须成功获取
- 货币基金：必须成功获取  
- 场内基金：必须成功获取
- 欧美QDII：必须成功获取
- 亚洲QDII：必须成功获取

🔒 安全机制：
- 任何数据源失败或为空，程序将终止
- 不会与数据库进行任何交互
- 详细的错误日志记录
- 确保数据的一致性和完整性

📝 注意事项：
- 确保数据库连接正常
- 网络环境稳定
- 建议在非交易时间执行
- 首次运行建议先测试
- 如果导入失败，先运行 test/test_imports.py
- 多线程操作时注意数据库连接池配置
- 🆕 程序现在会强制更新所有基金价格，无论是否有新增或删除
- 🆕 测试文件已移至 test/ 目录，运行测试前请切换目录
- 🆕 提供完整的模块化使用示例，支持独立调用各个功能模块
- 🆕 项目目录标准化为 fundsync，与项目名称保持一致

🔧 配置调整：
- 线程数：修改 config.py 中的 max_workers
- 批次大小：修改 config.py 中的 batch_size
- 重试次数：修改 config.py 中的 max_retry

📋 快速命令参考：
```bash
# 完整流程
cd /path/to/fundsync
cd test && source env.sh && python test_imports.py && cd ..
python syncfund.py

# 仅运行主程序
python syncfund.py

# 运行测试
cd test && python test_integration.py

# 模块化使用示例
python -c "
from data_processor import FundDataProcessor
processor = FundDataProcessor()
all_funds = processor.collect_all_fund_data()
print(f'收集到 {len(all_funds)} 只基金')
"
```